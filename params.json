{"name":"Node-mongosm","tagline":"Parse and push .osm files to Mongodb.","body":"Node-Mongosm\r\n============\r\n\r\nNode-mongosm will convert .osm files from Open Street Map and save / upsert new entries to your local or external mongodb instance.\r\n\r\n##Installation\r\n\r\nInstall the latest stable build from npm.\r\n```\r\nnpm install mongosm\r\n```\r\n\r\nOptionally you can install the latest from this repo by cloning and\r\ninstalling with the -d option.\r\n```\r\nnpm install -d\r\n```\r\n\r\n##Run\r\n\r\nWith the standard installation of Mongodb you can start parsing from the command line\r\n```\r\nmongod &\r\n./mongosm -v -f \"your-file.osm\"\r\n```\r\n\r\nAlternatively in lib/options.js set the {filename: \"your_file.osm\"} and run the app.\r\nYou will also want to set {upsert: true/false} to your needs.\r\n\r\nnote: if upsert = false, documents which already exist in the database will not be modified\r\nand will not be printed out in verbose mode.\r\n\r\n```\r\nnode mongosm\r\n```\r\n\r\nAll Mongoose [options](http://mongoosejs.com/docs/connections.html) are passed to mongoose connection, from the options.mongoose object. Uploading to an external database can be achieved by adding any settings to the mongoose: {} object in options.js\r\n\r\n##Command-line Flags\r\n```\r\n  -v verbose\r\n  -f file path\r\n  -l to lowercase\r\n  -upsert upcert all entries : defaults to save\r\n  -s suppress errors\r\n  -host host name\r\n  -port port\r\n  -u set db username\r\n  -p set db password\r\n  -tb use time bucketing.\r\n  -sc place all nodes, ways and relations in the same collection.\r\n  -k document filter: removes all attributes except ones supplied in comma separated list EX: -k way:user,timestamp\r\n  -i document filter: includes all attributes except ones supplied in comma separated list EX: -i way:user,timestamp\r\n  -db database\r\n  -tb use time bucketing.\r\n  -h help\r\n```\r\n\r\n## Options\r\n\r\nCommand line options are generally preferred, but option defaults may be manually set in the [options.js](https://github.com/sammerry/node-mongosm/blob/master/options.js) file.\r\n\r\nDocument Filter Options:\r\n```\r\n  ignoreAttributes: []  // items to excluded\r\n  keepAttributes: [] // strict list of items to include\r\n```\r\nonly one document filter type should be needed\r\n\r\nWay Specific Options:\r\n```\r\n  geometry: true // include the generated LineString or Polygon\r\n  nodes: false // include the array of node references that make up the way\r\n```\r\n\r\nDatabase Options:\r\n\r\nAll [Mongoose options](http://mongoosejs.com/docs/connections.html) are supported from options.mongoose in  [options.js](https://github.com/sammerry/node-mongosm/blob/master/options.js).\r\n\r\n##Document Filtering\r\n\r\nBy setting the options ignoreAttributes, keepAttributes per node, way or\r\nrelation you can filter the document pre save. The options should be\r\nprovided an array of the key names which are to be effected. This can also be achieved\r\nby using the -k or -i command line flag in the following format <elementName>:<key>,<key>.\r\n\r\nVia Command Line:\r\n```\r\n./mongosm -v -k way:loc,user\r\n```\r\n\r\nVia Options:\r\n```\r\nway {\r\n  keepAttributes: ['loc','user']\r\n}\r\n```\r\n\r\n##Time Stamp Bucketing\r\n\r\nWhen run with the timeBucket option to true or the -tb flag. You can search\r\nand index via day month or year much more efficiently with an $exists operator.\r\n\r\nSearches for all entries in january of 2009 would look like.\r\n```\r\ndb.geo.find({'osmTimeBucket.2009.01':{$exists:true}});\r\n```\r\n\r\n##Wish-list\r\n\r\n- Testing vs sample .osm files\r\n- Support for multiple files\r\n\r\n","google":"UA-42543746-1","note":"Don't delete this file! It's used internally to help with page regeneration."}